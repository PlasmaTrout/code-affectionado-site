<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: OSGi | Aggrolearning]]></title>
  <link href="http://peaceful-shelf-3096.herokuapp.com/blog/categories/osgi/atom.xml" rel="self"/>
  <link href="http://peaceful-shelf-3096.herokuapp.com/"/>
  <updated>2013-08-15T16:12:36-04:00</updated>
  <id>http://peaceful-shelf-3096.herokuapp.com/</id>
  <author>
    <name><![CDATA[jeff.downing@latchd.com]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Apache Felix - Modifying Our First Bundle For Declarative Services]]></title>
    <link href="http://peaceful-shelf-3096.herokuapp.com/blog/2013/08/15/apache-felix-modifying-our-first-bundle-for-declarative-services/"/>
    <updated>2013-08-15T15:53:00-04:00</updated>
    <id>http://peaceful-shelf-3096.herokuapp.com/blog/2013/08/15/apache-felix-modifying-our-first-bundle-for-declarative-services</id>
    <content type="html"><![CDATA[<p>In our previous <a href="/blog/2013/08/15/apache-felix-first-bundle/">example tutorial</a> we created an OSGi bundle in a programmatic fashion. In that bundle we registered two services into the service registry. While rather simple in implementation, the solution did depend heavily on use of the Activator class. And since only one Activator can be defined in a bundle, registering even more services would present a significant challenge on readability. We are going to neaten this up a bit and use some features of the R4 compendium known as Declarative Services. We will expound on it a little as we go along, but I encourage you to read the specifications on the <a href="http://www.osgi.org/Download/HomePage">OSGi Alliances Site</a>.</p>

<p>If you haven&rsquo;t done the first bundle tutorial mentioned above you can grab the source at:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Git Hub Quick Start <a href="https://github.com/PlasmaTrout/greeter-bundle-lab3">https://github.com/PlasmaTrout/greeter-bundle-lab3</a> GitHub </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone git@github.com:PlasmaTrout/greeter-bundle-lab3.git
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Requirements</h2>

<ul>
<li>Apache Felix (See <a href="/blog/2013/08/14/apache-felix-starting-from-scratch/">Starting From Scratch</a>)</li>
<li>Apache Maven</li>
<li>IDE Of Choice (Preferably IntelliJ IDEA)</li>
<li>Internet Connection (For Maven Repositories)</li>
<li>GIT (Needed To Pull Previous Project)</li>
</ul>


<h2>Audience</h2>

<p>Typically, this is Lab #3 in a classroom environment, however anyone that wishes can use this tutorial to create a tutorial bundle. The typical audience already understands what OSGi is and that Apache Felix is just one implementation of an OSGi framework.</p>

<h2>What We Are Going To Do</h2>

<ol>
<li>Remove The Activator From The Project</li>
<li>Add A XML File For The Greeter Service To The Resources Directory</li>
<li>Add Another XML File For The Greet Command To The Resources Directory</li>
<li>Build, Deploy And Test</li>
</ol>


<h2>Remove The Activator From The Project</h2>

<p>So let&rsquo;s delete that Activator now. Just completely wipe it out of the project. When your finished with that edit your POM.xml and completely wipe out this line (we don&rsquo;t need it anymore):</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Remove This Activator Line </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="ni">&amp;lt;</span>Bundle-Activator&gt;org.bhn.training.SimpleActivator<span class="ni">&amp;lt;</span>/Bundle-Activator&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>If you have any doubts as to whether its gone after a new build, just peek into the JAR file and make sure its gone. Mine looks something like this now (note no activator is inside the bundle):</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Sample JAR Contents Now </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>0 Wed Aug 14 11:18:10 EDT 2013 org/
</span><span class='line'>0 Wed Aug 14 11:18:10 EDT 2013 org/bhn/
</span><span class='line'>0 Wed Aug 14 11:18:10 EDT 2013 org/bhn/training/
</span><span class='line'>0 Wed Aug 14 11:18:10 EDT 2013 org/bhn/training/api/
</span><span class='line'>155 Wed Aug 14 11:16:32 EDT 2013 org/bhn/training/api/Greeter.class
</span><span class='line'>0 Wed Aug 14 11:18:10 EDT 2013 org/bhn/training/commands/
</span><span class='line'>1132 Wed Aug 14 11:16:32 EDT 2013 org/bhn/training/commands/GreeterCommands.class
</span><span class='line'>0 Wed Aug 14 11:18:10 EDT 2013 org/bhn/training/impl/
</span><span class='line'>482 Wed Aug 14 11:16:32 EDT 2013 org/bhn/training/impl/SimpleStringGreeterImpl.class</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Add A XML File For The Greeter Service To The Resources Directory</h2>

<p>Because we are using maven, we need to make some new directories and maven knows about so we can include resources into our project. Make a resources dir under main and then put a new dir under the resources dir called OSGI-INF. Our new directories path should look like:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Add A New Resource Path </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;&lt;Project>>/src/main/resources/OSGI-INF</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now in the OSGI-INF directory, lets create a new file called greetercomponent.xml. The name is somewhat irrelevant, however I would name it something that indicates what component it is for. The reason is, each service will be in its own xml file. After a while component1, component2 and component3 won&rsquo;t help developers quickly find its configuration.</p>

<p>Now we are going to do the same job that we did in the Activator in a declarative manner. Modify your greetercomponent.xml file to look like the following:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Add A Declarative Services Component File (greetercomponent.xml)</span> <a href='/downloads/code/greetercomponent.xml'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;scr:component</span> <span class="na">name=</span><span class="s">&quot;GreeterComponent&quot;</span>
</span><span class='line'>               <span class="na">xmlns:scr=</span><span class="s">&quot;http://www.osgi.org/xmlns/scr/v1.2.0&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;implementation</span> <span class="na">scr:class=</span><span class="s">&quot;org.bhn.training.impl.SimpleStringGreeterImpl&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;service&gt;</span>
</span><span class='line'>        <span class="nt">&lt;scr:provide</span> <span class="na">interface=</span><span class="s">&quot;org.bhn.training.api.Greeter&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/service&gt;</span>
</span><span class='line'><span class="nt">&lt;/scr:component&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>So interpreting this file is rather straight-forward. We are first declaring a component. What&rsquo;s a component. Well a component is really just a Java class that is declared in an XML document. Very similar to the concepts of beans if you are used to other Java terminologies. It has a name just for management in the framework. You can install other web consoles that help manage them by their component name.</p>

<p>Then we tell the component what its implementation class is, so it can create it when its needed.</p>

<p>Then we create a service and tell it what interface to provide, that is, register for us. That&rsquo;s all there really is to a simple service. However, before we can use this xml file, we need to tell the maven plugin to add a manifest entry for where to find it. That entry is known as the Service-Component entry. In our POM in the instructions for our bundle plugin lets add the following line:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Tell The Bundle The File Exists </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="ni">&amp;lt;</span>Service-Component&gt;OSGI-INF/greetercomponent.xml<span class="ni">&amp;lt;</span>/Service-Component&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>With this line in the file you are ready to deploy to your framework. But before you do, you need to make sure another specific bundle is installed in the container. It&rsquo;s called the SCR Declarative Services bundle and it should be running. If not not sweat, pull up your OSGi console and enter:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Install Service Component Registry Bundle </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>felix:install &lt;a href="http://mirror.sdunix.com/apache//felix/org.apache.felix.scr-1.6.2.jar">http://mirror.sdunix.com/apache//felix/org.apache.felix.scr-1.6.2.jar&lt;/a>
</span><span class='line'>felix:start X (where x is the number of the bundle)</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>After you deploy your bundle. Pull up the <a href="http://localhost:8080/system/console">web console</a> and expand it. You should see your new manifest entry is present and you should have a new service id registered. This is a pretty good indication that everything went as planned, but lets add our command otherwise testing it won&rsquo;t be too easy.</p>

<h2>Add Another XML File For The Greet Command To The Resources Directory</h2>

<p>So lets add one more component file to the OSGI-INF directory. Lets add a greetcommandcomponent.xml file. And do something similar as the above example to register it. However, in this component, we need properties to set upon activation so we have some new elements to add to the definition:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Add A Command Declarative Services Component File (greetcommandcomponent.xml)</span> <a href='/downloads/code/greetcommandcomponent.xml'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;scr:component</span> <span class="na">name=</span><span class="s">&quot;GreetCommandComponent&quot;</span>
</span><span class='line'>               <span class="na">xmlns:scr=</span><span class="s">&quot;http://www.osgi.org/xmlns/scr/v1.2.0&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;implementation</span> <span class="na">scr:class=</span><span class="s">&quot;org.bhn.training.commands.GreeterCommands&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;service&gt;</span>
</span><span class='line'>        <span class="nt">&lt;scr:provide</span> <span class="na">interface=</span><span class="s">&quot;org.bhn.training.commands.GreeterCommands&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;osgi.command.scope&quot;</span> <span class="na">value=</span><span class="s">&quot;tutorialds&quot;</span><span class="nt">&gt;&lt;/property&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;osgi.command.function&quot;</span><span class="nt">&gt;</span>greet<span class="nt">&lt;/property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/scr:provide&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/service&gt;</span>
</span><span class='line'><span class="nt">&lt;/scr:component&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Then we just add this to our manifest by changing our Service-Component entry to:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Add A Second Component File To The Maven Plugin </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="ni">&amp;lt;</span>Service-Component&gt;OSGI-INF/greetercomponent.xml,<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span>        OSGI-INF/greetcommandcomponent.xml<span class="ni">&amp;lt;</span>/Service-Component<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Build, Deploy and Test</h2>

<p>So package this guy up with a <strong>mvn package</strong> and then deploy using your method of choice (for this one I used the web console personally). After its deployed and started you should see a new command in our console for <strong>tutorialds:greet</strong> and be able to call it. I did have some exceptions during the making of this tutorial and you may experience the same. The few things that happened to me were:</p>

<h3>IllegalStateExceptions</h3>

<p><em>ERROR: greeter-bundle (15): [GreeterComponent] Cannot register Component
java.lang.IllegalStateException: Invalid BundleContext</em></p>

<p>This occured mainly because I had a typo in one of the component files which confused Felix into writing some properties it shouldn&rsquo;t have. I think the name attribute was missing from one of the properties. However, even after fixing it, the exception stayed there until I restarted the whole framework.</p>

<h3>XmlParseExceptions</h3>

<p>Typically they come in a variety of flavors and they are usually due to badly formed xml documents. Mine came from a example in the R4 compendium that had a declarative services entry as the following:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Malformed Header </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;xml</span> <span class="na">version=</span><span class="s">&quot;1.0&quot;</span> <span class="na">encoding=</span><span class="s">&quot;UTF-8&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Which I pasted and didn&rsquo;t check, but its really supposed to be:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Standard Header </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="ni">&amp;lt;</span>?xml version=<span class="ni">&amp;ldquo;</span>1.0<span class="ni">&amp;rdquo;</span> encoding=<span class="ni">&amp;ldquo;</span>UTF-8<span class="ni">&amp;rdquo;</span>?&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>In the next tutorial I think we will kill the command on this bundle and then add PaxExam so we can unit test our product. Generating commands for each bundle to test them is not a feasible option for long term sustainability. PaxExam will allow us to run Felix as a part of our Maven test lifecycle and test our bundle.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apache Felix - First Bundle The Programmatic Way]]></title>
    <link href="http://peaceful-shelf-3096.herokuapp.com/blog/2013/08/15/apache-felix-first-bundle/"/>
    <updated>2013-08-15T14:26:00-04:00</updated>
    <id>http://peaceful-shelf-3096.herokuapp.com/blog/2013/08/15/apache-felix-first-bundle</id>
    <content type="html"><![CDATA[<p>This tutorial is designed to guide the reader through creating a very simple bundle example. For simplicity we will use the commit Greeter/Greet examples that are seen very often in OSGi tutorials. Since this is a classroom taught course, usually done in corporate environments, it&rsquo;s rather targeted on a specific IDE. However, if you wish to use an alternate environment the instructions should be diverse enough to support building on alternate platforms.</p>

<h2>Requirements</h2>

<ul>
<li>Apache Felix (See <a href="/blog/2013/08/15/apache-felix-starting-from-scratch/">Starting From Scratch</a>)</li>
<li>Apache Maven</li>
<li>IDE Of Choice (Preferably IntelliJ IDEA)</li>
<li>Internet Connection (For Maven Repositories)</li>
</ul>


<h2>Audience</h2>

<p>Typically, this is Lab #2 in a classroom environment, however anyone that wishes can use this tutorial to create a tutorial bundle. The typical audience already understands what OSGi is and that Apache Felix is just one implementation of an OSGi framework.</p>

<h2>What We Are Going To Do</h2>

<ol>
<li>Generate A Maven Quickstart Java Project</li>
<li>Change The POM</li>
<li>Add Some Code</li>
<li>Build And Deploy Our Bundle To Apache-Felix</li>
<li>Create A Gogo Command To Test The Code</li>
</ol>


<h2>Generate A Maven Quickstart Java Project</h2>

<p>We will use the command line to generate a new maven project(Using the IDE would take too many pictures and overhead from the presentation). First, create a directory that you wish to place the project in, we will just use our $HOME/projects directory in the examples. Then run the following command:</p>

<p><div>
  <pre><code class='bash'>mvn archetype:generate -DgroupId=org.bhn.training -DartifactId=greeter-bundle -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false</code></pre>
</div>
</p>

<p>If you then open up IDEA and import an existing Maven project, you can select the new directory this command creates. At this point you have a very simple hello world application. You can compile and run this if you want, we are going to change it significantly though in the next few sections.</p>

<h2>Change The Pom</h2>

<p>If we want to build bundles instead of plain ole JARS we have to modify the plugins of the POM to support building a new type of packaging. While we are modifying the POM we really should add some dependencies to, just because we will need to write some code later that will require a few specific APIs.</p>

<p>Your starter project has a very simple minimal POM (which is why we chose it). So lets first add the plugins and configure then for making OSGi bundles. The main plugin we will need to add and configure is the maven-bundle-plugin. Its job is to create the necessary manifest additions needed. So just before the dependencies line, add in the following plugin:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>POM Modification </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'> <span class="nt">&lt;build&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>plugins<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>plugin<span class="ni">&amp;gt;</span>
</span><span class='line'>        <span class="ni">&amp;lt;</span>groupId<span class="ni">&amp;gt;</span>org.apache.felix<span class="ni">&amp;lt;</span>/groupId<span class="ni">&amp;gt;</span>
</span><span class='line'>        <span class="ni">&amp;lt;</span>artifactId<span class="ni">&amp;gt;</span>maven-bundle-plugin<span class="ni">&amp;lt;</span>/artifactId<span class="ni">&amp;gt;</span>
</span><span class='line'>        <span class="ni">&amp;lt;</span>version<span class="ni">&amp;gt;</span>2.3.7<span class="ni">&amp;lt;</span>/version<span class="ni">&amp;gt;</span>
</span><span class='line'>        <span class="ni">&amp;lt;</span>extensions<span class="ni">&amp;gt;</span>true<span class="ni">&amp;lt;</span>/extensions<span class="ni">&amp;gt;</span>
</span><span class='line'>        <span class="ni">&amp;lt;</span>configuration<span class="ni">&amp;gt;</span>
</span><span class='line'>            <span class="ni">&amp;lt;</span>instructions<span class="ni">&amp;gt;</span>
</span><span class='line'>                <span class="ni">&amp;lt;</span>Bundle-Name<span class="ni">&amp;gt;</span>${project.name}<span class="ni">&amp;lt;</span>/Bundle-Name<span class="ni">&amp;gt;</span>
</span><span class='line'>                <span class="ni">&amp;lt;</span>Bundle-SymbolicName<span class="ni">&amp;gt;</span>${project.artifactId}<span class="ni">&amp;lt;</span>/Bundle-SymbolicName<span class="ni">&amp;gt;</span>
</span><span class='line'>            <span class="ni">&amp;lt;</span>/instructions<span class="ni">&amp;gt;</span>
</span><span class='line'>        <span class="ni">&amp;lt;</span>/configuration<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>/plugin<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>/plugins<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;&lt;/build&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This plugins job is just to take the JAR and add the configuration instructions in MANIFEST.MF in the appropriate way. The only real difference between a JAR and an OSGi Bundle JAR is just some new attributes added to the manifest itself. In this case we are doing the bare minimum (for now). We also need to add some dependencies so lets add the following ones (if junit is in your dependencies already just delete it):</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>POM Dependencies </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;dependency&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>groupId<span class="ni">&amp;gt;</span>org.apache.felix<span class="ni">&amp;lt;</span>/groupId<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>artifactId<span class="ni">&amp;gt;</span>org.osgi.core<span class="ni">&amp;lt;</span>/artifactId<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>version<span class="ni">&amp;gt;</span>1.4.0<span class="ni">&amp;lt;</span>/version<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>scope<span class="ni">&amp;gt;</span>provided<span class="ni">&amp;lt;</span>/scope<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;&lt;/dependency&gt;</span>
</span><span class='line'><span class="nt">&lt;dependency&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>groupId<span class="ni">&amp;gt;</span>junit<span class="ni">&amp;lt;</span>/groupId<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>artifactId<span class="ni">&amp;gt;</span>junit<span class="ni">&amp;lt;</span>/artifactId<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>version<span class="ni">&amp;gt;</span>4.8.2<span class="ni">&amp;lt;</span>/version<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;&lt;/dependency&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>First we add org.osgi.core and then we just add a current version of junit for testing. That should be all we need for now. There is one last thing we need to do though. See that link towards the top of your POM that specifies that packaging should be JAR? Lets change that to bundle.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Change Packaging Type </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;groupId&gt;</span>com.bhn.training<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'><span class="nt">&lt;artifactId&gt;</span>greeter-bundle<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'><span class="nt">&lt;packaging&gt;</span>bundle<span class="nt">&lt;/packaging&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now our plugin will kick in and give us the correct output. If we run a <strong>mvn package</strong> we should get a build success and just o make sure our plugins are working lets go into the target directory of your project. There you should see a new jar file names greeter-bundle-1.0-SNAPSHOT.jar or something similar. If you execute the command:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Unpack And Examine Manifest </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>jar -xvf greeter-bundle-1.0-SNAPSHOT.jar META-INF/MANIFEST.MF
</span><span class='line'>cat META-INF/MANIFEST.MF</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>You should see now that the manifest included with this JAR is a bit different from a normal JAR. For instance a normal JAR might look something like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Normal JAR Manifest </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Manifest-Version: 1.0
</span><span class='line'>Archiver-Version: Plexus Archiver
</span><span class='line'>Created-By: Apache Maven
</span><span class='line'>Built-By: PlasmaTrout
</span><span class='line'>Build-Jdk: 1.6.0_51</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>However our new one, ends up very similar to:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>OSGi JAR Manifest </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Manifest-Version: 1.0
</span><span class='line'>Bnd-LastModified: 1376419554357
</span><span class='line'>Build-Jdk: 1.6.0_51
</span><span class='line'>Built-By: PlasmaTrout
</span><span class='line'>Bundle-ManifestVersion: 2
</span><span class='line'>Bundle-Name: greeter-bundle
</span><span class='line'>Bundle-SymbolicName: greeter-bundle
</span><span class='line'>Bundle-Version: 1.0.0.SNAPSHOT
</span><span class='line'>Created-By: Apache Maven Bundle Plugin
</span><span class='line'>Export-Package: org.bhn.training;version=&ldquo;1.0.0.SNAPSHOT&rdquo;
</span><span class='line'>Tool: Bnd-1.50.0</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Notice the extra entries? These will be become crucial to understand later, but just know that since our plugin really only specified two (name and symbolic name), quite a few more were actually written to the manifest by default thanks to the maven plugin.</p>

<h2>Add Some Code</h2>

<p>Now that we can build like a bundle, we should be writing some code to act like one. First lets create two new packages, lets create a org.bhn.training.api and an org.bhn.training.impl. This will allow us to minimally keep our APIs and Implementations seperate for organizational purposes only. In a perfect world these really will be seperate bundles, but thats out of scope for this tutorial.</p>

<p>In our <strong>api</strong> package lets create an interface called Greeter. Greeter should look like the following:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Greeter API Interface </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">org</span><span class="o">.</span><span class="na">bhn</span><span class="o">.</span><span class="na">training</span><span class="o">.</span><span class="na">api</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Greeter</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">String</span> <span class="n">greet</span><span class="o">();</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>As you can see it, really won&rsquo;t do much, but it gets the point across. Now lets go to our <strong>impl</strong> package and add an implementation class SimpleStringGreeterImpl.java with the code:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Greeter Implementation </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">org</span><span class="o">.</span><span class="na">bhn</span><span class="o">.</span><span class="na">training</span><span class="o">.</span><span class="na">impl</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">import</span> <span class="nn">org.bhn.training.api.Greeter</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SimpleStringGreeterImpl</span> <span class="kd">implements</span> <span class="n">Greeter</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="n">String</span> <span class="nf">greet</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&quot;Hello World!&quot;</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now that we have an implementation of a simple service. What we need to do is write some code to register that service in whats called a service registry. Then anyone who needs to be greeted can simple use the interface to get an instance to the service.</p>

<p>The programmatic way to do this is to create an Activator. An activator in a bundle is represented as a class that implements the interface <a href="http://www.osgi.org/javadoc/r4v43/core/org/osgi/framework/BundleActivator.html">BundleActivator</a>. When the bundle is activated it calls methods found in the class dynamically. This exposes two methods that allow us to register and unregister services programmtically. Lets change that App.java class that sits in the main level to be our Activator.</p>

<p>First rename App.java to SimpleActivator.java (It should be SimpleStringGreeterActivator buts thats too verbose for the tutorial right now). Then change it to looks like the following:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Greeter Activator Class </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">org</span><span class="o">.</span><span class="na">bhn</span><span class="o">.</span><span class="na">training</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">import</span> <span class="nn">org.osgi.framework.BundleActivator</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.osgi.framework.BundleContext</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SimpleActivator</span> <span class="kd">implements</span> <span class="n">BundleActivator</span>
</span><span class='line'><span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">start</span><span class="o">(</span><span class="n">BundleContext</span> <span class="n">bundleContext</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// What to do when it starts</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">stop</span><span class="o">(</span><span class="n">BundleContext</span> <span class="n">bundleContext</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// What to do when it stops</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>See the two methods it exposed? We will put some code in here in a second, but before we forget lets add the appropriate manifest entry so that the framework knows where this is. In the plugin that we set up earlier add this element to the instructions element:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Maven Plugin Activator Instruction </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="ni">&amp;lt;</span>Bundle-Activator&gt;org.bhn.training.SimpleActivator<span class="ni">&amp;lt;</span>/Bundle-Activator&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This manifest entry tells the framework what class the activator is in so it can dynamically call the interface methods start and stop for it. If we build and checkout the manifest now we will see:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Manifest Revisited </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Manifest-Version: 1.0
</span><span class='line'>Bnd-LastModified: 1376421388797
</span><span class='line'>Build-Jdk: 1.6.0_51
</span><span class='line'>Built-By: JSDowning
</span><span class='line'>Bundle-Activator: org.bhn.training.SimpleActivator
</span><span class='line'>&hellip; bunch of other stuff &hellip;</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Good, we can see our Activator in there, lets put some code in it. The steps involved in registering a service are pretty simple.</p>

<ol>
<li>We get a reference to the BundleContext</li>
<li>We use registerService to keep the ServiceRegistration</li>
<li>When done we use the ServiceRegistration to unregister the service.</li>
</ol>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Fully Functioning Activator </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">org</span><span class="o">.</span><span class="na">bhn</span><span class="o">.</span><span class="na">training</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">import</span> <span class="nn">org.bhn.training.impl.SimpleStringGreeterImpl</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.osgi.framework.BundleActivator</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.osgi.framework.BundleContext</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.osgi.framework.ServiceRegistration</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">import</span> <span class="nn">java.util.Hashtable</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SimpleActivator</span> <span class="kd">implements</span> <span class="n">BundleActivator</span>
</span><span class='line'><span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">ServiceRegistration</span> <span class="n">registration</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">start</span><span class="o">(</span><span class="n">BundleContext</span> <span class="n">bundleContext</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">Hashtable</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">,</span><span class="n">Object</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">props</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Hashtable</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;();</span>
</span><span class='line'>  <span class="n">registration</span> <span class="o">=</span> <span class="n">bundleContext</span>
</span><span class='line'>    <span class="o">.</span><span class="na">registerService</span><span class="o">(</span><span class="n">org</span><span class="o">.</span><span class="na">bhn</span><span class="o">.</span><span class="na">training</span><span class="o">.</span><span class="na">api</span><span class="o">.</span><span class="na">Greeter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">(),</span>
</span><span class='line'>        <span class="k">new</span> <span class="nf">SimpleStringGreeterImpl</span><span class="o">(),</span><span class="n">props</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">stop</span><span class="o">(</span><span class="n">BundleContext</span> <span class="n">bundleContext</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">registration</span><span class="o">.</span><span class="na">unregister</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>So the gist of this is that the service registers our Implementation class under the string name of the interface. This means anyone who wants a reference to this service can use the interface to get it. It&rsquo;s important to note that right now, it won&rsquo;t work because even though our interfaces are public, they won&rsquo;t be exposed in the framework. We must explicitly tell OSGi to expose our interfaces. Let&rsquo;s do that so we can call it later. The easiest way to do this is to export the interfaces namespace, so lets add this line to the plugin:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Exposing Our API In Maven </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="ni">&amp;lt;</span>Export-Package&gt;org.bhn.training.api<span class="ni">&amp;lt;</span>/Export-Package&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This tells the framework to allow other bundles to see this namespace. Without this there would be know way a caller could get a reference to our service, because there would be no interface found called org.bhn.training.api.Greeter to lookup. Notice that the impl class is never exposed. There is absolutely NO method here that someone could instantiate a new SimpleStringGreetingImpl(). Even though its public, it&rsquo;s not exposed by the framework. This gets to the heart of why OSGi is so modular. It&rsquo;s relatively impossible to couple your classes together without some seriously bad practices.</p>

<h2>Deploy Our Bundle</h2>

<p>We are going to use the command line to deploy it, but you don&rsquo;t have to. If you still have the web interface from the previous tutorial you can update and install it from there as well. But from the command line it looks like:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Deploying A Bundle Using Felix Command Line </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>g! felix:install file:/Users/PlasmaTrout/Projects/greeter-bundle/target/greeter-bundle-1.0-SNAPSHOT.jar
</span><span class='line'>Bundle ID: 13&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>g! felix:start 13</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Create A Gogo Shell Command</h2>

<p>It&rsquo;s started but we still have no way of seeing it. Lets create a way to actually call it. In other tutorials we talked about the Gogo shell and how extensible it is, but lets create a new command just to demonstrate how easy it is to expose our interface as a command as well. All we need to do to make this happen is add two new properties to our service. Lets change our startup to be:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Creating A Gogo Shell Command </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">start</span><span class="o">(</span><span class="n">BundleContext</span> <span class="n">bundleContext</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="n">Hashtable</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">,</span><span class="n">Object</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">props</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Hashtable</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;();</span>
</span><span class='line'>  <span class="n">props</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;osgi.command.scope&quot;</span><span class="o">,</span><span class="s">&quot;tutorial&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="n">props</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;osgi.command.function&quot;</span><span class="o">,</span><span class="k">new</span> <span class="n">String</span><span class="o">[]</span> <span class="o">{</span> <span class="s">&quot;greet&quot;</span> <span class="o">});</span>
</span><span class='line'>  <span class="n">registration</span> <span class="o">=</span> <span class="n">bundleContext</span>
</span><span class='line'>          <span class="o">.</span><span class="na">registerService</span><span class="o">(</span><span class="n">org</span><span class="o">.</span><span class="na">bhn</span><span class="o">.</span><span class="na">training</span><span class="o">.</span><span class="na">api</span><span class="o">.</span><span class="na">Greeter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">(),</span>
</span><span class='line'>          <span class="k">new</span> <span class="nf">SimpleStringGreeterImpl</span><span class="o">(),</span><span class="n">props</span><span class="o">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Using these two properties, you can expose any class method as a Gogo shell command. The first specifies the scope of the command, which is just a clever way to avoid conflicts with other command named the same. The second is the method to call and command name wrapped it one. So calling <strong>tutorial:greet</strong> should cause a hello world to appear. Lets <strong>mvn package</strong> again then run an update on our bundle. My bundle was 13 so typing <strong>update 13</strong> will reinstall from the installed location. Now if you look at your command list by typing <strong>help</strong> you should have a <strong>tutorial:greet</strong> command visible. Type it and see what happens:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Executing Our New Command </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>g! tutorial:greet
</span><span class='line'>Hello World!
</span><span class='line'>g!</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This still isn&rsquo;t a very good test of the service from a consumer standpoint. You really would want to test that the service is in the registry and that you can ask for it by interface name. If you want to do that, create a new package named org.bhn.training.commands and put a class called GreeterCommands in it. Should end up like the following:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Making A Better Command Class </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">org</span><span class="o">.</span><span class="na">bhn</span><span class="o">.</span><span class="na">training</span><span class="o">.</span><span class="na">commands</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">import</span> <span class="nn">org.bhn.training.api.Greeter</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.osgi.framework.BundleContext</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.osgi.framework.ServiceReference</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">osgi</span><span class="o">.</span><span class="na">framework</span><span class="o">.</span><span class="na">FrameworkUtil</span><span class="o">.*;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">GreeterCommands</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">public</span> <span class="n">String</span> <span class="n">greet</span><span class="o">(){</span>
</span><span class='line'>    <span class="n">BundleContext</span> <span class="n">ctx</span> <span class="o">=</span> <span class="n">getBundle</span><span class="o">(</span><span class="n">org</span><span class="o">.</span><span class="na">bhn</span><span class="o">.</span><span class="na">training</span><span class="o">.</span><span class="na">api</span><span class="o">.</span><span class="na">Greeter</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'>            <span class="o">.</span><span class="na">getBundleContext</span><span class="o">();</span>
</span><span class='line'>    <span class="n">ServiceReference</span> <span class="n">ref</span> <span class="o">=</span> <span class="n">ctx</span><span class="o">.</span><span class="na">getServiceReference</span><span class="o">(</span>
</span><span class='line'>            <span class="n">org</span><span class="o">.</span><span class="na">bhn</span><span class="o">.</span><span class="na">training</span><span class="o">.</span><span class="na">api</span><span class="o">.</span><span class="na">Greeter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>    <span class="n">Greeter</span> <span class="n">greeter</span> <span class="o">=</span> <span class="o">(</span><span class="n">Greeter</span><span class="o">)</span> <span class="n">ctx</span><span class="o">.</span><span class="na">getService</span><span class="o">(</span><span class="n">ref</span><span class="o">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">greeter</span><span class="o">.</span><span class="na">greet</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
This code shows a programmatic method to call a service from code. We will expound on this somewhat later because there is a lot easier ways of doing this, but this way represents the classic steps to OSGi service calling:</p>

<ol>
<li>Get the BundleContext</li>
<li>Get the ServiceReference</li>
<li>Use the ServiceReference to get the Service</li>
<li>Call The Service</li>
</ol>


<p>Next we need ot change the startup to register two services instead of one like so:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Registering Two Services </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">start</span><span class="o">(</span><span class="n">BundleContext</span> <span class="n">bundleContext</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="n">Hashtable</span> <span class="n">props</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Hashtable</span><span class="o">();</span>
</span><span class='line'>  <span class="n">props</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;osgi.command.scope&quot;</span><span class="o">,</span><span class="s">&quot;tutorial&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="n">props</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;osgi.command.function&quot;</span><span class="o">,</span><span class="k">new</span> <span class="n">String</span><span class="o">[]</span> <span class="o">{</span> <span class="s">&quot;greet&quot;</span> <span class="o">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">Hashtable</span> <span class="n">noprops</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Hashtable</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">registration</span> <span class="o">=</span> <span class="n">bundleContext</span>
</span><span class='line'>          <span class="o">.</span><span class="na">registerService</span><span class="o">(</span><span class="n">org</span><span class="o">.</span><span class="na">bhn</span><span class="o">.</span><span class="na">training</span><span class="o">.</span><span class="na">api</span><span class="o">.</span><span class="na">Greeter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">(),</span>
</span><span class='line'>          <span class="k">new</span> <span class="nf">SimpleStringGreeterImpl</span><span class="o">(),</span><span class="n">noprops</span><span class="o">);</span>
</span><span class='line'>    <span class="n">command</span> <span class="o">=</span> <span class="n">bundleContext</span><span class="o">.</span><span class="na">registerService</span><span class="o">(</span>
</span><span class='line'>        <span class="n">org</span><span class="o">.</span><span class="na">bhn</span><span class="o">.</span><span class="na">training</span><span class="o">.</span><span class="na">commands</span><span class="o">.</span><span class="na">GreeterCommands</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">(),</span>
</span><span class='line'>        <span class="k">new</span> <span class="nf">GreeterCommands</span><span class="o">(),</span><span class="n">props</span><span class="o">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now after an <strong>felix:update</strong> you can call your command again and witness that its actually calling the service using the OSGi API.</p>

<p><em>Note: After looking at the Activator imagine you have more than two services to register. Now picture 10 or more. It can get a little verbose to register all these programmatically. Let&rsquo;s fix that. In the next tutorial we will convert this to use an xml file to declare the service components. This will improve the readability considerably.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apache Felix - Starting From Scratch]]></title>
    <link href="http://peaceful-shelf-3096.herokuapp.com/blog/2013/08/14/apache-felix-starting-from-scratch/"/>
    <updated>2013-08-14T14:20:00-04:00</updated>
    <id>http://peaceful-shelf-3096.herokuapp.com/blog/2013/08/14/apache-felix-starting-from-scratch</id>
    <content type="html"><![CDATA[<p>This tutorial is designed to provide guidance on downloading, installing and configuring Apache Felix for use in other classroom labs. It&rsquo;s designed to give the bare bones and provide a starting point needed in the remainder of the tutorials that will be given on Apache Felix. Its can also easily be adapter for classroom demonstrations and hackathons.</p>

<h2>Audience</h2>

<p>Typically, this is Lab #1 in a classroom environment, however anyone that wishes can use this tutorial to set up their own Apache Felix envinroment for learning OSGi. The typical audience already understands what OSGi is and that Apache Felix is just one implementation of an OSGi framework.</p>

<h2>What We Are Going To Do</h2>

<ol>
<li>Install Apache Felix</li>
<li>Start It Up</li>
<li>Install A Web Console</li>
<li>Add Some Bundles</li>
</ol>


<h2>Installing Apache Felix</h2>

<p>Apache Felix is pretty easy to get started with regardless of what discipline of development you come from. The first step is to get your hands on the binary, which at time of write is found at the following URL:</p>

<p><a href="http://felix.apache.org/downloads.cgi">http://felix.apache.org/downloads.cgi</a></p>

<p><em>For these examples we will use the zip version since it will translate regardless of what operating system your are using.</em></p>

<p>Before we get moving let me explain that these labs were designed to mimic the framework you will see most often in Adobe CQ, which is why we are using Apache Felix here. But there are a plethora of OSGi frameworks to choose from and you may have fun downloading and trying a few others out. Keep in mind, while some of the other frameworks will make things considerably easier, they may in fact, deviate from the OSGi Alliance&rsquo;s original specifications. If we work in Felix we are almost certain to be R4 compliant. Let&rsquo;s get started.</p>

<p>Make a directory for yourself somewhere where we can work as a scratchpad. I typically move my files from the Download directory so they don’t get lost in the mass of downloads that end up in there. I usually do something like:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Sample Path </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$HOME/projects/apache-felix</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Once you have your structure set up, mv the file (or copy) from the Downloads directory to your new location and unzip it. Mileage may vary on Windows devices but on MacOS set up can be accomplished by issuing the following commands:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Installation </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd $HOME/projects
</span><span class='line'>mkdir apache-felix
</span><span class='line'>cd apache-felix/
</span><span class='line'>cp /Users/&lt;&lt;me>>/Downloads/org.apache.felix.main.distribution-4.2.1.zip .
</span><span class='line'>unzip org.apache.felix.main.distribution-4.2.1.zip</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Start It Up</h2>

<p>After its unzipped you’ll notice an felix-framework-x-x-x folder (depending on what distribution you have). If you change directory into that folder you can explore the structure of this bare bones install. We won’t be deep diving into all of these directories just yet, just notice they are there. If you decide to explore, be sure not to edit them. The framework boots off of these directories and uses them to index and locate classes. Changing them around is not a great idea. So lets start up Felix, if you type:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Running Felix </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>java -jar bin/felix.jar</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>You should be welcomed with a running framework console that looks like:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>The Gogo Shell </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;hr />
</span><span class='line'>
</span><span class='line'>&lt;p>Welcome to Apache Felix Gogo&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>g!</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>What this? Well by default, all that comes with Felix, as far as administration is concerned, is a console. Now, don’t get the wrong impression, this is one powerful console thats staring back at you. It just doesn’t seem like it right now (especially since the terminal apparently is some sort of strange dance style).</p>

<p>The GOGO shell (the dance style in question), is a standard Apache shell that you will see on both Felix and Karaf.  Karaf however, does have a ANSI color one which makes it a little more exciting (and by exciting I mean 1990&rsquo;s IRC exciting). The g! prompt is the surefire mechism to recognize this shell over the others.</p>

<p>So we came all this way, we might as well issue some commands. Type in the following to the shell:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>List Bundles Command </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>felix:lb</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The command “lb” is a felix command for listing all of the bundles installed in Felix. The felix prefix is sort of a namespace qualifier. It exists primarily in the case two different command bundles use the same command name. But since they come with Felix, there are also aliased directly on the console. So typing “lb” will work as well. As far as instruction go, however, I will almost always prefix the command. My rationale is that in other systems, like Apache Karaf, it will be mandatory since so many open source bundles exist in the framework and you will need to get used to it anyways.</p>

<p>The output of our <strong>felix:lb</strong> command should have resembled the following:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>List Bundles Output </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>g! felix:lb
</span><span class='line'>START LEVEL 1
</span><span class='line'>   ID|State      |Level|Name&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>0|Active     |    0|System Bundle (4.2.1)
</span><span class='line'>1|Active     |    1|Apache Felix Bundle Repository (1.6.6)
</span><span class='line'>2|Active     |    1|Apache Felix Gogo Command (0.12.0)
</span><span class='line'>3|Active     |    1|Apache Felix Gogo Runtime (0.10.0)
</span><span class='line'>4|Active     |    1|Apache Felix Gogo Shell (0.10.0)
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>g!</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>For those of you that have browsed another Felix installation, possibly Sling or Adobe CQ, you probably are asking “Yeah right, where are the other 200+ bundles?”. Well this is it, the default Felix framework operates on these 5 bundles and doesn’t need much else. You can start developing right now on these building whatever you heart desires.</p>

<p>So, what else can you do on the console? Well type help in the console and you should get back a list of all of the available commands out of the box. The console should happily respond:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Help Command Output </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&hellip; some stuff &hellip;
</span><span class='line'>felix:install
</span><span class='line'>felix:lb
</span><span class='line'>felix:log
</span><span class='line'>felix:ls
</span><span class='line'>felix:refresh
</span><span class='line'>felix:resolve
</span><span class='line'>felix:start
</span><span class='line'>felix:stop
</span><span class='line'>&hellip; more stuff &hellip;</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Before you try these out, it’s important to note that the help system can also give you some pretty detailed information on each command. For instance type <strong>help felix:ls</strong> and look at the output:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Help List Output </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>g! help felix:ls&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>ls &ndash; get current directory contents
</span><span class='line'>   scope: felix
</span><span class='line'>   parameters:&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>  CommandSession   automatically supplied shell session
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>ls &ndash; get specified path contents
</span><span class='line'>   scope: felix
</span><span class='line'>   parameters:&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>  CommandSession   automatically supplied shell session
</span><span class='line'>  String   path with optionally wildcarded file name
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>g!</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Then try it:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>List Command Output </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>g! felix:ls
</span><span class='line'>/Users/Me/ExternalLibraries/apache-felix-bare/felix-framework-4.2.1/bin
</span><span class='line'>/Users/Me/ExternalLibraries/apache-felix-bare/felix-framework-4.2.1/bundle
</span><span class='line'>/Users/Me/ExternalLibraries/apache-felix-bare/felix-framework-4.2.1/conf
</span><span class='line'>/Users/Me/ExternalLibraries/apache-felix-bare/felix-framework-4.2.1/DEPENDENCIES
</span><span class='line'>/Users/Me/ExternalLibraries/apache-felix-bare/felix-framework-4.2.1/doc
</span><span class='line'>/Users/Me/ExternalLibraries/apache-felix-bare/felix-framework-4.2.1/felix-cache
</span><span class='line'>/Users/Me/ExternalLibraries/apache-felix-bare/felix-framework-4.2.1/LICENSE
</span><span class='line'>/Users/Me/ExternalLibraries/apache-felix-bare/felix-framework-4.2.1/LICENSE.kxml2
</span><span class='line'>/Users/Me/ExternalLibraries/apache-felix-bare/felix-framework-4.2.1/NOTICE&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>g!</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Thats all there is really to understanding the GOGO shell. Now mastering all of these commands would be a good idea, but it’s not really needed. That is unless you want to stay lightweight, say on a mobile device or micro-board type installation. For the desktop environments there is a web based console (strategically named WebConsole :) that we can employ to make this a little easier for us.</p>

<p>Before you install it, take a look at the help on the <strong>felix:install</strong> command.</p>

<h2>Installing A Web Console</h2>

<p>After executing a <strong>help felix:install</strong>, you will notice that the command is scoped to the felix prefix and takes a collection of parameters. This means if we really wanted to we could install multiple things at once. Secondly, note it takes a URL to a file and not just a file path. This means it’s more than capable of installing over the internet. Let’s take advantage of the that to install the web console and a http server into the framework. In the console issue the command:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Installing The Web Console </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>felix:install &lt;a href="http://mirror.switch.ch/mirror/apache/dist/felix/org.apache.felix.webconsole-4.2.0-all.jar">http://mirror.switch.ch/mirror/apache/dist/felix/org.apache.felix.webconsole-4.2.0-all.jar&lt;/a></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>the web console requires a web server so lets install jetty</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Installing Jetty </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>felix:install &lt;a href="http://mirror.switch.ch/mirror/apache/dist/felix/org.apache.felix.http.jetty-2.2.0.jar">http://mirror.switch.ch/mirror/apache/dist/felix/org.apache.felix.http.jetty-2.2.0.jar&lt;/a></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Once the download and install is completed, the console should return back a Bundle ID: X (where X is a number). This represent the bundle id that you just installed and will use to find out more information about the bundle and start/stop it. Now do an <strong>felix:lb</strong> and look at your list. You should have two bundles in the installed state.
In order to start up our console we will first need to start the Jetty bundle then our Web Management Console bundle. To do that type the command <strong>felix:start X</strong> (where x is the number of the Jetty bundle).</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Starting Jetty and Web Console </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>g! lb
</span><span class='line'>START LEVEL 1
</span><span class='line'>   ID|State      |Level|Name&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>0|Active     |    0|System Bundle (4.2.1)
</span><span class='line'>1|Active     |    1|Apache Felix Bundle Repository (1.6.6)
</span><span class='line'>2|Active     |    1|Apache Felix Gogo Command (0.12.0)
</span><span class='line'>3|Active     |    1|Apache Felix Gogo Runtime (0.10.0)
</span><span class='line'>4|Active     |    1|Apache Felix Gogo Shell (0.10.0)
</span><span class='line'>6|Installed  |    1|Apache Felix Web Management Console (All In One) (4.2.0.all)
</span><span class='line'>7|Installed  |    1|Apache Felix Http Jetty (2.2.0)
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>g! felix:start 7
</span><span class='line'>g! [INFO] Started jetty 6.1.x at port(s) &lt;a href="HTTP:8080">HTTP:8080&lt;/a>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>g! felix:start 6
</span><span class='line'>g!</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Do the same for the Web Management Console. Then go to <a href="http://localhost:8080">http://localhost:8080</a> and see if you get a subtle Jetty 404 ERROR. Believe it or not, this 404 is actually a good thing. It tells us Jetty is running and we have no pages on the root. We do, however, have servlets in the path /system/console now. So try going to this URL using a username of admin and a password of admin:</p>

<p><a href="http://localhost:8080/system/console/bundles">http://localhost:8080/system/console/bundles</a></p>

<p>After logging in, you should land on the bundles page. This page is probably the most important of the pages on the web console and you will use it more than the others in you quest to become a master bundle developer. The reasoning is simple, this is where you go to upload, start, stop and examine bundles. There are some important OSGi foundational things to take note of on this page so lets review a few of them.</p>

<h3>Every Bundle Has A Unique Id</h3>

<p>Yep. That’s it there in the Id column. They stay pretty simple as integers. Definitely prevents a lot of typing when using the console.</p>

<h3>Bundle 0 belongs to the framework and cannot be stopped or started</h3>

<p>We should have reviewed earlier that bundle 0 belongs to the framework. Heck, it really is the running framework which explains why it doesn’t have a stop button available for it. It’s version number tells you the version of the framework you are running and if you ever see this bundle stopped someone is playing a trick on you because the web console wouldn’t be available if it was.</p>

<h3>Bundle 0 only exports the bare essentials and only the standard Java libraries</h3>

<p>If you click the right arrow expander next to the name you can see a ton of more information (probably more that you’d like) about the system bundle. As you’d expect this bundle exports all of the core Java libraries and a few OSGi specific ones. The best part is that a significant amount of XML libraries are exported to, so always check here before exporting your own.</p>

<h3>Bundle 0 must start first</h3>

<p>Notice the start level field. It’s blank? Yep. That’s because bundle 0 must start first and therefore is really start level 0.</p>

<h3>Bundle 0 must have no dependencies</h3>

<p>Now take a look at the Imported Packaged section. Notice that the system bundle imports nothing. It has no dependencies. At all. None.</p>

<h3>Bundles have states</h3>

<p>So the status column shows what state the entire bundle is in. All of ours should show active at this point.</p>

<h3>Bundles can be started and stopped independently of each other</h3>

<p>Notice the stop button next to each bundle. This is where you can stop, start, or delete them from the framework.</p>

<p><em>NOTE: Bundle 0 has a lot to it. Look around. It also registers two services, they are two interfaces named PackageAdmin and StartLevel.</em></p>

<p>Well there’s the 1 dollar tour of the bundles section of the app. Let’s take a look at the rest of the menu structure
Under OSGi we get Bundles (which is where we are), Configuration, Log Service and Services (Image 3.11). Ignore the Status and Web Console top level menus for now. They really just drive to informational content anyways. The stock OSGi sections of this menu apply to some UI pieces we haven’t installed yet. If you try to go to Configuration or Log Service you may notice they just tell you they aren’t installed. Let click on Services.</p>

<h2>Add Some More Bundles</h2>

<p>So that really the bare minimum install, however there are some Felix provided bundles you may want to browse yourself and install at will. You can find them at:</p>

<p><a href="http://felix.apache.org/downloads.cgi">http://felix.apache.org/downloads.cgi</a> towards the bottom.</p>

<p>Lets continue our class setup with the following ones (They are mostly to enhance our web console and will provide good practice):</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Adding More Features Practice </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>felix:install &lt;a href="http://mirror.switch.ch/mirror/apache/dist/felix/org.apache.felix.configadmin-1.6.0.jar">http://mirror.switch.ch/mirror/apache/dist/felix/org.apache.felix.configadmin-1.6.0.jar&lt;/a>
</span><span class='line'>felix:install &lt;a href="http://mirror.switch.ch/mirror/apache/dist/felix/org.apache.felix.log-1.0.1.jar">http://mirror.switch.ch/mirror/apache/dist/felix/org.apache.felix.log-1.0.1.jar&lt;/a>
</span><span class='line'>felix:install &lt;a href="http://mirror.switch.ch/mirror/apache/dist/felix/org.apache.felix.metatype-1.0.6.jar">http://mirror.switch.ch/mirror/apache/dist/felix/org.apache.felix.metatype-1.0.6.jar&lt;/a>
</span><span class='line'>felix:install &lt;a href="http://mirror.switch.ch/mirror/apache/dist/felix/org.apache.felix.dependencymanager-3.1.0.jar">http://mirror.switch.ch/mirror/apache/dist/felix/org.apache.felix.dependencymanager-3.1.0.jar&lt;/a>
</span><span class='line'>felix:install &lt;a href="http://mirror.switch.ch/mirror/apache/dist/felix/org.apache.felix.eventadmin-1.3.2.jar">http://mirror.switch.ch/mirror/apache/dist/felix/org.apache.felix.eventadmin-1.3.2.jar&lt;/a>
</span><span class='line'>felix:install &lt;a href="http://mirror.switch.ch/mirror/apache/dist/felix/org.apache.felix.deploymentadmin-0.9.4.jar">http://mirror.switch.ch/mirror/apache/dist/felix/org.apache.felix.deploymentadmin-0.9.4.jar&lt;/a>
</span><span class='line'>felix:install &lt;a href="http://mirror.switch.ch/mirror/apache/dist/felix/org.apache.felix.webconsole.plugins.event-1.0.2.jar">http://mirror.switch.ch/mirror/apache/dist/felix/org.apache.felix.webconsole.plugins.event-1.0.2.jar&lt;/a>
</span><span class='line'>felix:install &lt;a href="http://mirror.switch.ch/mirror/apache/dist/felix/org.apache.felix.webconsole.plugins.packageadmin-1.0.0.jar">http://mirror.switch.ch/mirror/apache/dist/felix/org.apache.felix.webconsole.plugins.packageadmin-1.0.0.jar&lt;/a>
</span><span class='line'>felix:install &lt;a href="http://mirror.switch.ch/mirror/apache/dist/felix/org.apache.felix.scr-1.6.2.jar">http://mirror.switch.ch/mirror/apache/dist/felix/org.apache.felix.scr-1.6.2.jar&lt;/a>
</span><span class='line'>felix:install &lt;a href="http://mirror.switch.ch/mirror/apache/dist/felix/org.apache.felix.webconsole.plugins.ds-1.0.0.jar">http://mirror.switch.ch/mirror/apache/dist/felix/org.apache.felix.webconsole.plugins.ds-1.0.0.jar&lt;/a></span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
</feed>

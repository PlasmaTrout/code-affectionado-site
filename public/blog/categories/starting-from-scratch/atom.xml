<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Starting From Scratch | CodeAffectionado]]></title>
  <link href="http://www.codeaffectionado.com/blog/categories/starting-from-scratch/atom.xml" rel="self"/>
  <link href="http://www.codeaffectionado.com/"/>
  <updated>2013-08-17T14:01:26-04:00</updated>
  <id>http://www.codeaffectionado.com/</id>
  <author>
    <name><![CDATA[jeff.downing@latchd.com]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Apache Jackrabbit - Starting From Scratch]]></title>
    <link href="http://www.codeaffectionado.com/blog/2013/08/17/apache-jackrabbit-starting-out/"/>
    <updated>2013-08-17T12:39:00-04:00</updated>
    <id>http://www.codeaffectionado.com/blog/2013/08/17/apache-jackrabbit-starting-out</id>
    <content type="html"><![CDATA[<p>This tutorial was designed to get the reader using JSR-170&rsquo;s an JSR-283&rsquo;s core APIs by using Apache Jackrabbit. These series of tutorials build on one another, so this one will form the foundation of the tutorials to come.</p>

<h2>Audience</h2>

<p>Typically, this is Lab #1 in a classroom environment, however anyone that wishes can use this tutorial. Most people performing this tutorial have already had some presented instruction and an overview of Apache Jackrabbit and the JCR specifications.</p>

<h2>Requirements</h2>

<ul>
<li>Apache Maven</li>
<li>IDE Of Choice (Preferably IntelliJ IDEA)</li>
<li>Internet Connection (For Maven Repositories)</li>
</ul>


<h2>What We Are Going To Do</h2>

<p>Our intent with this lab section is just to get you kickstarted on your exploration of Apache Jackrabbit. Before we begin, it’s important to note that Jackrabbit is not your typical server platform. In a typical database platform you would download some packages and run them which would start up a server. Then in a different project you’d probably fire up some JDBC driver and write code that connects to that server and does stuff. Jackrabbit wasn’t exactly built this way, its really an API that abstracts away how things are stored and only concentrates on hierarchal content management.</p>

<p>In order to get a base project running that will form the foundation of the rest of our exploration we need to do the following:</p>

<ol>
<li>Generate A Quick Start Project With Maven</li>
<li>Add Some Dependencies To The POM</li>
<li>Start The Repository For The First Time</li>
<li>Ask The Repository About Some Of Its Features</li>
</ol>


<h2>Generate A Quick Start Project With Maven</h2>

<p>Just like our usual lab series, we are going to start with a quick start project and modify it to support what we need it to do. The goal is to get you comfortable with Maven and building out your own project stuctures. To get started with a basic quickstart project lets use the following command line:</p>

<p><code>bash New Maven Quick Start
mvn archetype:generate -DgroupId=org.codeaffectionado.training -DartifactId=jackrabbit-tutorial -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false
</code></p>

<p>Now lets open up our IDE of choice and import this project. Before we get to deep into this tutorial lets add a plugin that will allow us to run our project using Maven. This will just speed some things up for us later. In our POM lets add the following section to the root of the project:</p>

<p>``` xml Maven Execute Plugin
<build></p>

<pre><code>  &lt;plugins&gt;
      &lt;plugin&gt;
          &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
          &lt;artifactId&gt;exec-maven-plugin&lt;/artifactId&gt;
          &lt;version&gt;1.2.1&lt;/version&gt;
          &lt;executions&gt;
              &lt;execution&gt;
                  &lt;goals&gt;
                      &lt;goal&gt;java&lt;/goal&gt;
                  &lt;/goals&gt;
              &lt;/execution&gt;
          &lt;/executions&gt;
          &lt;configuration&gt;
              &lt;mainClass&gt;org.codeaffectionado.training.App&lt;/mainClass&gt;
          &lt;/configuration&gt;
      &lt;/plugin&gt;
  &lt;/plugins&gt;
</code></pre>

<p>  </build>
```</p>

<p>Now if go to the command line and do a <strong>mvn compile exec:java</strong> we can run our application and watch it happily report:</p>

<p><code>bash
[INFO] --- exec-maven-plugin:1.2.1:java (default-cli) @ jackrabbit-tutorial ---
Hello World!
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
</code></p>

<p>This is important because running java classes or jar projects can be quite a chore when we are using Maven as our build lifecycle. This keeps us from having to go to our target directory and run our jars by hand, even though you are more than welcome to so if you wish. It will require you to further bundle your dependencies in the jar so you don&rsquo;t have to worry about classpath problems.</p>

<h2>Add Some Dependencies To The POM</h2>

<p>All we really need to perform some JCR programming is include two new dependencies into our POM like so:</p>

<p>``` xml Dependencies Needed For Apache Jackrabbit
<dependency></p>

<pre><code>&lt;groupId&gt;javax.jcr&lt;/groupId&gt;
&lt;artifactId&gt;jcr&lt;/artifactId&gt;
&lt;version&gt;2.0&lt;/version&gt;
</code></pre>

<p></dependency>
<dependency></p>

<pre><code>&lt;groupId&gt;org.apache.jackrabbit&lt;/groupId&gt;
&lt;artifactId&gt;jackrabbit-core&lt;/artifactId&gt;
&lt;version&gt;2.5.0&lt;/version&gt;
</code></pre>

<p></dependency>
<dependency></p>

<pre><code>&lt;groupId&gt;org.slf4j&lt;/groupId&gt;
&lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;
&lt;version&gt;1.6.1&lt;/version&gt;
</code></pre>

<p></dependency>
```</p>

<h2>Start The Repository For The First Time</h2>

<p>So starting the repository may not be that obvious at present time, but its really easy to do. Let&rsquo;s go into our main method and add the following lines to the main method:</p>

<p>``` java Starting Up Our Repository
public static void main( String[] args ) throws RepositoryException {</p>

<pre><code>Repository repository = new TransientRepository();
Session session = repository.login(
        new SimpleCredentials("admin","admin".toCharArray()));

System.out.println("Hello World!");

session.logout();
</code></pre>

<p>}
```
So whats all this? Well its really pretty easy to explain. We talk about in class that the standard flow of calling the JCR revolves around:</p>

<ol>
<li>Getting a reference to the Repository</li>
<li>Using the Repository to login and get a Session</li>
<li>Use The Session To Get A Node or The Root Node</li>
<li>Do Some Work</li>
<li>Save The Session</li>
<li>Logout</li>
</ol>


<p>In our code above we just did 1,2 and 6. Just enough to get us a repository built. But lets look at what we accomplished in this code.</p>

<p><blockquote><p>Repository repository = new TransientRepository();</p></blockquote></p>

<p>Apache Jackrabbit has an implementation of <a href="http://www.day.com/maven/javax.jcr/javadocs/jcr-2.0/javax/jcr/Repository.html?is-external=true">Repository</a> (which is an interface BTW) called <a href="http://jackrabbit.apache.org/api/2.2/org/apache/jackrabbit/core/TransientRepository.html">TransientRepository</a>. It&rsquo;s considered Transient because it starts up when its needed and shuts down where there are no more sessions connected to it. This is the primary repository we will be using with our samples and represents the most common repository used with other applications.</p>

<p><blockquote><p>Session session = repository.login(</p></p><p><pre><code>        new SimpleCredentials("admin","admin".toCharArray()));<br/></code></pre></p><p><p></p></blockquote></p>

<p>Here we are using the repository to login. Our login is just using a set of Credentials (another interface). Currently there are only guest and simple credentials included with the version we are using. Thats ok though, most of the time the JCR is a part of another application or framework. It isn&rsquo;t connected to from the outside often.</p>

<p><blockquote><p>session.logout();</p></blockquote></p>

<p>Self explanitory, but this is us logging out of our session. It&rsquo;s somewhat redundant here, but good practice. Because, when the primary thread dies it will expires anyway and the repository will shutdown.</p>

<p>Now run it with our new Maven sequence <strong>mvn compile exec:java</strong> and notice the results that stream by. When it finishes refresh the root of your project in your IDE and take a look now. It appears some directories were created for you and some new config files where put down automatically. Basically Jackrabbit created a respository in your project root and set it up for you. This includes storing everything in an Apache Derby database instance it created for you.</p>

<h2>Ask The Repository About Some Of Its Features</h2>

<p>So lets ask the repository about some of its features. To get information about the repository and what it supports back. The Repository interface contains some constants that can be used to query information from the repository. Lets modify our example and just ask some questions to the repository itself. Primarily lets see what its vendor, name and version are:</p>

<p>``` java Asking The Repository For Information
String vendor = repository.getDescriptor(Repository.REP_VENDOR_DESC);
String product = repository.getDescriptor(Repository.REP_NAME_DESC);
String version = repository.getDescriptor(Repository.REP_VERSION_DESC);</p>

<p>System.out.println(&ldquo;We Are Using &rdquo;+vendor+&ldquo; &rdquo;+product+&ldquo; version &rdquo;+version);
```</p>

<p>Now run your <strong>mvn compile exec:java</strong> again and watch the repositories response:</p>

<p><code>bash
We Are Using Apache Software Foundation Jackrabbit version 2.5.0
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
</code></p>

<p>There are some other things that the repository can tell you. I would highly recomment checking out the <a href="http://www.day.com/maven/javax.jcr/javadocs/jcr-2.0/javax/jcr/Repository.html?is-external=true">Repository&rsquo;s interface documentation</a> and trying some of the other constants. Experiment and get comfortable with this flow. We will be using it more and more as time goes on.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apache Felix - Starting From Scratch]]></title>
    <link href="http://www.codeaffectionado.com/blog/2013/08/14/apache-felix-starting-from-scratch/"/>
    <updated>2013-08-14T14:20:00-04:00</updated>
    <id>http://www.codeaffectionado.com/blog/2013/08/14/apache-felix-starting-from-scratch</id>
    <content type="html"><![CDATA[<p>This tutorial is designed to provide guidance on downloading, installing and configuring Apache Felix for use in other classroom labs. It&rsquo;s designed to give the bare bones and provide a starting point needed in the remainder of the tutorials that will be given on Apache Felix. Its can also easily be adapter for classroom demonstrations and hackathons.</p>

<h2>Audience</h2>

<p>Typically, this is Lab #1 in a classroom environment, however anyone that wishes can use this tutorial to set up their own Apache Felix envinroment for learning OSGi. The typical audience already understands what OSGi is and that Apache Felix is just one implementation of an OSGi framework.</p>

<h2>What We Are Going To Do</h2>

<ol>
<li>Install Apache Felix</li>
<li>Start It Up</li>
<li>Install A Web Console</li>
<li>Add Some Bundles</li>
</ol>


<h2>Installing Apache Felix</h2>

<p>Apache Felix is pretty easy to get started with regardless of what discipline of development you come from. The first step is to get your hands on the binary, which at time of write is found at the following URL:</p>

<p><a href="http://felix.apache.org/downloads.cgi">http://felix.apache.org/downloads.cgi</a></p>

<p><em>For these examples we will use the zip version since it will translate regardless of what operating system your are using.</em></p>

<p>Before we get moving let me explain that these labs were designed to mimic the framework you will see most often in Adobe CQ, which is why we are using Apache Felix here. But there are a plethora of OSGi frameworks to choose from and you may have fun downloading and trying a few others out. Keep in mind, while some of the other frameworks will make things considerably easier, they may in fact, deviate from the OSGi Alliance&rsquo;s original specifications. If we work in Felix we are almost certain to be R4 compliant. Let&rsquo;s get started.</p>

<p>Make a directory for yourself somewhere where we can work as a scratchpad. I typically move my files from the Download directory so they don’t get lost in the mass of downloads that end up in there. I usually do something like:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Sample Path </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$HOME/projects/apache-felix</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Once you have your structure set up, mv the file (or copy) from the Downloads directory to your new location and unzip it. Mileage may vary on Windows devices but on MacOS set up can be accomplished by issuing the following commands:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Installation </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd $HOME/projects
</span><span class='line'>mkdir apache-felix
</span><span class='line'>cd apache-felix/
</span><span class='line'>cp /Users/&lt;&lt;me>>/Downloads/org.apache.felix.main.distribution-4.2.1.zip .
</span><span class='line'>unzip org.apache.felix.main.distribution-4.2.1.zip</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Start It Up</h2>

<p>After its unzipped you’ll notice an felix-framework-x-x-x folder (depending on what distribution you have). If you change directory into that folder you can explore the structure of this bare bones install. We won’t be deep diving into all of these directories just yet, just notice they are there. If you decide to explore, be sure not to edit them. The framework boots off of these directories and uses them to index and locate classes. Changing them around is not a great idea. So lets start up Felix, if you type:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Running Felix </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>java -jar bin/felix.jar</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>You should be welcomed with a running framework console that looks like:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>The Gogo Shell </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;hr />
</span><span class='line'>
</span><span class='line'>&lt;p>Welcome to Apache Felix Gogo&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>g!</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>What this? Well by default, all that comes with Felix, as far as administration is concerned, is a console. Now, don’t get the wrong impression, this is one powerful console thats staring back at you. It just doesn’t seem like it right now (especially since the terminal apparently is some sort of strange dance style).</p>

<p>The GOGO shell (the dance style in question), is a standard Apache shell that you will see on both Felix and Karaf.  Karaf however, does have a ANSI color one which makes it a little more exciting (and by exciting I mean 1990&rsquo;s IRC exciting). The g! prompt is the surefire mechism to recognize this shell over the others.</p>

<p>So we came all this way, we might as well issue some commands. Type in the following to the shell:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>List Bundles Command </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>felix:lb</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The command “lb” is a felix command for listing all of the bundles installed in Felix. The felix prefix is sort of a namespace qualifier. It exists primarily in the case two different command bundles use the same command name. But since they come with Felix, there are also aliased directly on the console. So typing “lb” will work as well. As far as instruction go, however, I will almost always prefix the command. My rationale is that in other systems, like Apache Karaf, it will be mandatory since so many open source bundles exist in the framework and you will need to get used to it anyways.</p>

<p>The output of our <strong>felix:lb</strong> command should have resembled the following:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>List Bundles Output </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>g! felix:lb
</span><span class='line'>START LEVEL 1
</span><span class='line'>   ID|State      |Level|Name&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>0|Active     |    0|System Bundle (4.2.1)
</span><span class='line'>1|Active     |    1|Apache Felix Bundle Repository (1.6.6)
</span><span class='line'>2|Active     |    1|Apache Felix Gogo Command (0.12.0)
</span><span class='line'>3|Active     |    1|Apache Felix Gogo Runtime (0.10.0)
</span><span class='line'>4|Active     |    1|Apache Felix Gogo Shell (0.10.0)
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>g!</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>For those of you that have browsed another Felix installation, possibly Sling or Adobe CQ, you probably are asking “Yeah right, where are the other 200+ bundles?”. Well this is it, the default Felix framework operates on these 5 bundles and doesn’t need much else. You can start developing right now on these building whatever you heart desires.</p>

<p>So, what else can you do on the console? Well type help in the console and you should get back a list of all of the available commands out of the box. The console should happily respond:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Help Command Output </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&hellip; some stuff &hellip;
</span><span class='line'>felix:install
</span><span class='line'>felix:lb
</span><span class='line'>felix:log
</span><span class='line'>felix:ls
</span><span class='line'>felix:refresh
</span><span class='line'>felix:resolve
</span><span class='line'>felix:start
</span><span class='line'>felix:stop
</span><span class='line'>&hellip; more stuff &hellip;</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Before you try these out, it’s important to note that the help system can also give you some pretty detailed information on each command. For instance type <strong>help felix:ls</strong> and look at the output:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Help List Output </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>g! help felix:ls&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>ls &ndash; get current directory contents
</span><span class='line'>   scope: felix
</span><span class='line'>   parameters:&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>  CommandSession   automatically supplied shell session
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>ls &ndash; get specified path contents
</span><span class='line'>   scope: felix
</span><span class='line'>   parameters:&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>  CommandSession   automatically supplied shell session
</span><span class='line'>  String   path with optionally wildcarded file name
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>g!</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Then try it:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>List Command Output </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>g! felix:ls
</span><span class='line'>/Users/Me/ExternalLibraries/apache-felix-bare/felix-framework-4.2.1/bin
</span><span class='line'>/Users/Me/ExternalLibraries/apache-felix-bare/felix-framework-4.2.1/bundle
</span><span class='line'>/Users/Me/ExternalLibraries/apache-felix-bare/felix-framework-4.2.1/conf
</span><span class='line'>/Users/Me/ExternalLibraries/apache-felix-bare/felix-framework-4.2.1/DEPENDENCIES
</span><span class='line'>/Users/Me/ExternalLibraries/apache-felix-bare/felix-framework-4.2.1/doc
</span><span class='line'>/Users/Me/ExternalLibraries/apache-felix-bare/felix-framework-4.2.1/felix-cache
</span><span class='line'>/Users/Me/ExternalLibraries/apache-felix-bare/felix-framework-4.2.1/LICENSE
</span><span class='line'>/Users/Me/ExternalLibraries/apache-felix-bare/felix-framework-4.2.1/LICENSE.kxml2
</span><span class='line'>/Users/Me/ExternalLibraries/apache-felix-bare/felix-framework-4.2.1/NOTICE&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>g!</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Thats all there is really to understanding the GOGO shell. Now mastering all of these commands would be a good idea, but it’s not really needed. That is unless you want to stay lightweight, say on a mobile device or micro-board type installation. For the desktop environments there is a web based console (strategically named WebConsole :) that we can employ to make this a little easier for us.</p>

<p>Before you install it, take a look at the help on the <strong>felix:install</strong> command.</p>

<h2>Installing A Web Console</h2>

<p>After executing a <strong>help felix:install</strong>, you will notice that the command is scoped to the felix prefix and takes a collection of parameters. This means if we really wanted to we could install multiple things at once. Secondly, note it takes a URL to a file and not just a file path. This means it’s more than capable of installing over the internet. Let’s take advantage of the that to install the web console and a http server into the framework. In the console issue the command:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Installing The Web Console </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>felix:install &lt;a href="http://mirror.switch.ch/mirror/apache/dist/felix/org.apache.felix.webconsole-4.2.0-all.jar">http://mirror.switch.ch/mirror/apache/dist/felix/org.apache.felix.webconsole-4.2.0-all.jar&lt;/a></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>the web console requires a web server so lets install jetty</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Installing Jetty </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>felix:install &lt;a href="http://mirror.switch.ch/mirror/apache/dist/felix/org.apache.felix.http.jetty-2.2.0.jar">http://mirror.switch.ch/mirror/apache/dist/felix/org.apache.felix.http.jetty-2.2.0.jar&lt;/a></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Once the download and install is completed, the console should return back a Bundle ID: X (where X is a number). This represent the bundle id that you just installed and will use to find out more information about the bundle and start/stop it. Now do an <strong>felix:lb</strong> and look at your list. You should have two bundles in the installed state.
In order to start up our console we will first need to start the Jetty bundle then our Web Management Console bundle. To do that type the command <strong>felix:start X</strong> (where x is the number of the Jetty bundle).</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Starting Jetty and Web Console </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>g! lb
</span><span class='line'>START LEVEL 1
</span><span class='line'>   ID|State      |Level|Name&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>0|Active     |    0|System Bundle (4.2.1)
</span><span class='line'>1|Active     |    1|Apache Felix Bundle Repository (1.6.6)
</span><span class='line'>2|Active     |    1|Apache Felix Gogo Command (0.12.0)
</span><span class='line'>3|Active     |    1|Apache Felix Gogo Runtime (0.10.0)
</span><span class='line'>4|Active     |    1|Apache Felix Gogo Shell (0.10.0)
</span><span class='line'>6|Installed  |    1|Apache Felix Web Management Console (All In One) (4.2.0.all)
</span><span class='line'>7|Installed  |    1|Apache Felix Http Jetty (2.2.0)
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>g! felix:start 7
</span><span class='line'>g! [INFO] Started jetty 6.1.x at port(s) &lt;a href="HTTP:8080">HTTP:8080&lt;/a>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>g! felix:start 6
</span><span class='line'>g!</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Do the same for the Web Management Console. Then go to <a href="http://localhost:8080">http://localhost:8080</a> and see if you get a subtle Jetty 404 ERROR. Believe it or not, this 404 is actually a good thing. It tells us Jetty is running and we have no pages on the root. We do, however, have servlets in the path /system/console now. So try going to this URL using a username of admin and a password of admin:</p>

<p><a href="http://localhost:8080/system/console/bundles">http://localhost:8080/system/console/bundles</a></p>

<p>After logging in, you should land on the bundles page. This page is probably the most important of the pages on the web console and you will use it more than the others in you quest to become a master bundle developer. The reasoning is simple, this is where you go to upload, start, stop and examine bundles. There are some important OSGi foundational things to take note of on this page so lets review a few of them.</p>

<h3>Every Bundle Has A Unique Id</h3>

<p>Yep. That’s it there in the Id column. They stay pretty simple as integers. Definitely prevents a lot of typing when using the console.</p>

<h3>Bundle 0 belongs to the framework and cannot be stopped or started</h3>

<p>We should have reviewed earlier that bundle 0 belongs to the framework. Heck, it really is the running framework which explains why it doesn’t have a stop button available for it. It’s version number tells you the version of the framework you are running and if you ever see this bundle stopped someone is playing a trick on you because the web console wouldn’t be available if it was.</p>

<h3>Bundle 0 only exports the bare essentials and only the standard Java libraries</h3>

<p>If you click the right arrow expander next to the name you can see a ton of more information (probably more that you’d like) about the system bundle. As you’d expect this bundle exports all of the core Java libraries and a few OSGi specific ones. The best part is that a significant amount of XML libraries are exported to, so always check here before exporting your own.</p>

<h3>Bundle 0 must start first</h3>

<p>Notice the start level field. It’s blank? Yep. That’s because bundle 0 must start first and therefore is really start level 0.</p>

<h3>Bundle 0 must have no dependencies</h3>

<p>Now take a look at the Imported Packaged section. Notice that the system bundle imports nothing. It has no dependencies. At all. None.</p>

<h3>Bundles have states</h3>

<p>So the status column shows what state the entire bundle is in. All of ours should show active at this point.</p>

<h3>Bundles can be started and stopped independently of each other</h3>

<p>Notice the stop button next to each bundle. This is where you can stop, start, or delete them from the framework.</p>

<p><em>NOTE: Bundle 0 has a lot to it. Look around. It also registers two services, they are two interfaces named PackageAdmin and StartLevel.</em></p>

<p>Well there’s the 1 dollar tour of the bundles section of the app. Let’s take a look at the rest of the menu structure
Under OSGi we get Bundles (which is where we are), Configuration, Log Service and Services (Image 3.11). Ignore the Status and Web Console top level menus for now. They really just drive to informational content anyways. The stock OSGi sections of this menu apply to some UI pieces we haven’t installed yet. If you try to go to Configuration or Log Service you may notice they just tell you they aren’t installed. Let click on Services.</p>

<h2>Add Some More Bundles</h2>

<p>So that really the bare minimum install, however there are some Felix provided bundles you may want to browse yourself and install at will. You can find them at:</p>

<p><a href="http://felix.apache.org/downloads.cgi">http://felix.apache.org/downloads.cgi</a> towards the bottom.</p>

<p>Lets continue our class setup with the following ones (They are mostly to enhance our web console and will provide good practice):</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Adding More Features Practice </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>felix:install &lt;a href="http://mirror.switch.ch/mirror/apache/dist/felix/org.apache.felix.configadmin-1.6.0.jar">http://mirror.switch.ch/mirror/apache/dist/felix/org.apache.felix.configadmin-1.6.0.jar&lt;/a>
</span><span class='line'>felix:install &lt;a href="http://mirror.switch.ch/mirror/apache/dist/felix/org.apache.felix.log-1.0.1.jar">http://mirror.switch.ch/mirror/apache/dist/felix/org.apache.felix.log-1.0.1.jar&lt;/a>
</span><span class='line'>felix:install &lt;a href="http://mirror.switch.ch/mirror/apache/dist/felix/org.apache.felix.metatype-1.0.6.jar">http://mirror.switch.ch/mirror/apache/dist/felix/org.apache.felix.metatype-1.0.6.jar&lt;/a>
</span><span class='line'>felix:install &lt;a href="http://mirror.switch.ch/mirror/apache/dist/felix/org.apache.felix.dependencymanager-3.1.0.jar">http://mirror.switch.ch/mirror/apache/dist/felix/org.apache.felix.dependencymanager-3.1.0.jar&lt;/a>
</span><span class='line'>felix:install &lt;a href="http://mirror.switch.ch/mirror/apache/dist/felix/org.apache.felix.eventadmin-1.3.2.jar">http://mirror.switch.ch/mirror/apache/dist/felix/org.apache.felix.eventadmin-1.3.2.jar&lt;/a>
</span><span class='line'>felix:install &lt;a href="http://mirror.switch.ch/mirror/apache/dist/felix/org.apache.felix.deploymentadmin-0.9.4.jar">http://mirror.switch.ch/mirror/apache/dist/felix/org.apache.felix.deploymentadmin-0.9.4.jar&lt;/a>
</span><span class='line'>felix:install &lt;a href="http://mirror.switch.ch/mirror/apache/dist/felix/org.apache.felix.webconsole.plugins.event-1.0.2.jar">http://mirror.switch.ch/mirror/apache/dist/felix/org.apache.felix.webconsole.plugins.event-1.0.2.jar&lt;/a>
</span><span class='line'>felix:install &lt;a href="http://mirror.switch.ch/mirror/apache/dist/felix/org.apache.felix.webconsole.plugins.packageadmin-1.0.0.jar">http://mirror.switch.ch/mirror/apache/dist/felix/org.apache.felix.webconsole.plugins.packageadmin-1.0.0.jar&lt;/a>
</span><span class='line'>felix:install &lt;a href="http://mirror.switch.ch/mirror/apache/dist/felix/org.apache.felix.scr-1.6.2.jar">http://mirror.switch.ch/mirror/apache/dist/felix/org.apache.felix.scr-1.6.2.jar&lt;/a>
</span><span class='line'>felix:install &lt;a href="http://mirror.switch.ch/mirror/apache/dist/felix/org.apache.felix.webconsole.plugins.ds-1.0.0.jar">http://mirror.switch.ch/mirror/apache/dist/felix/org.apache.felix.webconsole.plugins.ds-1.0.0.jar&lt;/a></span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
</feed>
